#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    May 12, 2022 02:08:51 AM +07  platform: Windows NT

import sys
import datetime
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from Backend.customer import Customer
from Backend.employee import Employee
from Backend.station import Station
import tkinter.messagebox as tsmg
import all_support

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40' # X11 color: #666666
        _ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
        _ana2color = 'beige' # X11 color: #f5f5dc
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 

        top.geometry("1200x700+316+148")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1,  1)
        top.title("E-Tracking App - for employees - Add Package")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#0080ff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        
        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0, rely=0, height=700, width=1200)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="fleur")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        photo_location = "img/employee_bg (Custom).png"
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        
        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=0.275, rely=0.071, relheight=0.864, relwidth=0.463)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#ffffff")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.Label_add_package = tk.Label(self.Frame2)
        self.Label_add_package.place(relx=0.126, rely=0.033, height=106, width=422)
        self.Label_add_package.configure(activebackground="#f9f9f9")
        self.Label_add_package.configure(background="#ffffff")
        self.Label_add_package.configure(compound='left')
        self.Label_add_package.configure(disabledforeground="#a3a3a3")
        self.Label_add_package.configure(font="-family {Segoe UI} -size 20 -weight bold")
        self.Label_add_package.configure(foreground="#000000")
        self.Label_add_package.configure(highlightbackground="#d9d9d9")
        self.Label_add_package.configure(highlightcolor="black")
        self.Label_add_package.configure(text='''Add Package''')

        self.Label_customer_ID = tk.Label(self.Frame2)
        self.Label_customer_ID.place(relx=0.162, rely=0.211, height=26, width=112)
        self.Label_customer_ID.configure(activebackground="#f9f9f9")
        self.Label_customer_ID.configure(anchor='w')
        self.Label_customer_ID.configure(background="#ffffff")
        self.Label_customer_ID.configure(compound='left')
        self.Label_customer_ID.configure(disabledforeground="#a3a3a3")
        self.Label_customer_ID.configure(font="-family {Segoe UI} -size 9")
        self.Label_customer_ID.configure(foreground="#000000")
        self.Label_customer_ID.configure(highlightbackground="#d9d9d9")
        self.Label_customer_ID.configure(highlightcolor="black")
        self.Label_customer_ID.configure(text='''Customer's ID''')


 
        # Dropdown menu options
        options_customer_ID = []
        for i in Customer.All_Customer_list:
            options_customer_ID.append(i)

        self.Entry_customer_ID = ttk.Combobox(self.Frame2, values = options_customer_ID)
        self.Entry_customer_ID.place(relx=0.162, rely=0.273, height=34, relwidth=0.655)
        self.Entry_customer_ID.set('--select customers ID--')
        

        self.Label_size = tk.Label(self.Frame2)
        self.Label_size.place(relx=0.162, rely=0.344, height=26, width=42)
        self.Label_size.configure(activebackground="#f9f9f9")
        self.Label_size.configure(anchor='w')
        self.Label_size.configure(background="#ffffff")
        self.Label_size.configure(compound='left')
        self.Label_size.configure(disabledforeground="#a3a3a3")
        self.Label_size.configure(font="-family {Segoe UI} -size 9")
        self.Label_size.configure(foreground="#000000")
        self.Label_size.configure(highlightbackground="#d9d9d9")
        self.Label_size.configure(highlightcolor="black")
        self.Label_size.configure(text='''Size''')


        # Dropdown menu options
        options_size = [
        "Big",
        "Medium",
        "Small"
        
        ]


        self.Entry_size = ttk.Combobox(self.Frame2, values = options_size)
        self.Entry_size.place(relx=0.162, rely=0.40, height=34, relwidth=0.655)
        self.Entry_size.set('--select size--')
      

        self.Label_status = tk.Label(self.Frame2)
        self.Label_status.place(relx=0.162, rely=0.466, height=26, width=62)
        self.Label_status.configure(activebackground="#f9f9f9")
        self.Label_status.configure(anchor='w')
        self.Label_status.configure(background="#ffffff")
        self.Label_status.configure(compound='left')
        self.Label_status.configure(disabledforeground="#a3a3a3")
        self.Label_status.configure(foreground="#000000")
        self.Label_status.configure(highlightbackground="#d9d9d9")
        self.Label_status.configure(highlightcolor="black")
        self.Label_status.configure(text='''Status''')


        # Dropdown menu options
        options_status = [
        "Received",
        "Delivering",
        "Successfully"
        
        ]

        self.Entry_status = ttk.Combobox(self.Frame2, values = options_status)
        self.Entry_status.place(relx=0.162, rely=0.522, height=34, relwidth=0.655)
        self.Entry_status.set("--select status--")
        

        self.Label_station_ID = tk.Label(self.Frame2)
        self.Label_station_ID.place(relx=0.162, rely=0.590, height=26, width=92)
        self.Label_station_ID.configure(activebackground="#f9f9f9")
        self.Label_station_ID.configure(anchor='w')
        self.Label_station_ID.configure(background="#ffffff")
        self.Label_station_ID.configure(compound='left')
        self.Label_station_ID.configure(disabledforeground="#a3a3a3")
        self.Label_station_ID.configure(font="-family {Segoe UI} -size 9")
        self.Label_station_ID.configure(foreground="#000000")
        self.Label_station_ID.configure(highlightbackground="#d9d9d9")
        self.Label_station_ID.configure(highlightcolor="black")
        self.Label_station_ID.configure(text='''Station's ID''')


        # Dropdown menu options
        options_station_ID = []
        print(Station.All_station_list)
        for j in Station.All_station_list:
            options_station_ID.append(j)

        self.Entry_station_ID = ttk.Combobox(self.Frame2, values = options_station_ID)
        self.Entry_station_ID.place(relx=0.162, rely=0.640, height=34, relwidth=0.655)
        self.Entry_station_ID.set('--select station ID--')
 
        self.Label_address = tk.Label(self.Frame2)
        self.Label_address.place(relx=0.165, rely=0.710, height=26, width=112)
        self.Label_address.configure(anchor='w')
        self.Label_address.configure(background="#ffffff")
        self.Label_address.configure(compound='left')
        self.Label_address.configure(disabledforeground="#a3a3a3")
        self.Label_address.configure(font="-family {Segoe UI} -size 9")
        self.Label_address.configure(foreground="#000000")
        self.Label_address.configure(text='''Address''')

        self.Entry_address = tk.Entry(self.Frame2)
        self.Entry_address.place(relx=0.165, rely=0.770, height=34, relwidth=0.655)
        self.Entry_address.configure(background="white")
        self.Entry_address.configure(disabledforeground="#a3a3a3")
        self.Entry_address.configure(font="TkFixedFont")
        self.Entry_address.configure(foreground="#000000")
        self.Entry_address.configure(insertbackground="black")
        
        self.Button_add = tk.Button(self.Frame2)
        self.Button_add.place(relx=0.214, rely=0.86, height=53, width=96)
        self.Button_add.configure(activebackground="beige")
        self.Button_add.configure(activeforeground="#000000")
        self.Button_add.configure(background="#0080ff")
        self.Button_add.configure(compound='left')
        self.Button_add.configure(disabledforeground="#a3a3a3")
        self.Button_add.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Button_add.configure(foreground="#ffffff")
        self.Button_add.configure(highlightbackground="#d9d9d9")
        self.Button_add.configure(highlightcolor="black")
        self.Button_add.configure(pady="0")
        self.Button_add.configure(text='''Add''')
        self.Button_add.configure(command=self.create_btn)
        
        self.Button_sign_up = tk.Button(self.Frame2)
        self.Button_sign_up.place(relx=0.414, rely=0.86, height=53, width=96)
        self.Button_sign_up.configure(activebackground="beige")
        self.Button_sign_up.configure(activeforeground="#000000")
        self.Button_sign_up.configure(background="#44c9b0")
        self.Button_sign_up.configure(compound='left')
        self.Button_sign_up.configure(disabledforeground="#a3a3a3")
        self.Button_sign_up.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Button_sign_up.configure(foreground="#ffffff")
        self.Button_sign_up.configure(highlightbackground="#d9d9d9")
        self.Button_sign_up.configure(highlightcolor="black")
        self.Button_sign_up.configure(pady="0")
        self.Button_sign_up.configure(text='''Sign Up''')
        self.Button_sign_up.configure(command=self.sign_up_btn)
        
        self.Button_cancle = tk.Button(self.Frame2)
        self.Button_cancle.place(relx=0.614, rely=0.86, height=53, width=96)
        self.Button_cancle.configure(activebackground="beige")
        self.Button_cancle.configure(activeforeground="#000000")
        self.Button_cancle.configure(background="#e21e26")
        self.Button_cancle.configure(compound='left')
        self.Button_cancle.configure(disabledforeground="#a3a3a3")
        self.Button_cancle.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Button_cancle.configure(foreground="#ffffff")
        self.Button_cancle.configure(highlightbackground="#d9d9d9")
        self.Button_cancle.configure(highlightcolor="black")
        self.Button_cancle.configure(pady="0")
        self.Button_cancle.configure(text='''Cancle''')
        self.Button_cancle.configure(command=self.cancel_btn)
    




    def create_btn(self):
        customer = self.Entry_customer_ID.get()
        size = self.Entry_size.get()
        status = self.Entry_status.get()
        station = self.Entry_station_ID.get()
        address = self.Entry_address.get()
        time = datetime.datetime.now()

        if customer == "" or size == "" or status == "" or station == "" or address == "" or customer == "--select customers ID--" or size == "--select size--" or station ==  "--select station ID--":
            tsmg.showerror('Error', 'Invalid Input')
        else:
                store_station = Station.get_station(station)
                if store_station.add_packages(Employee.create_package(customer, address, station, size, status, time)): 
                    tsmg.showinfo('Add Complate', 'Add Packges Complate!!')
                else:
                    tsmg.showerror('Error', 'Invalid Input')
            

    def sign_up_btn(self):
        self.top.destroy() 
        all_support.main_create_user_page1()
        if __name__ == '__main__':
            all_support.main_create_user_page1()

    def cancel_btn(self):
        self.top.destroy()
        all_support.main_backend_page1()
        if __name__ == '__main__':
            all_support.main_backend_page1()

def start_up():
    all_support.main_add_package()

if __name__ == '__main__':
    all_support.main_add_package()




